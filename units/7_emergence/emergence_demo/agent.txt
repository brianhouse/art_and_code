class Agent(Object):
        
    def seek(self, agent, threshold, strength):
        strength = max(min(strength, 1), 0)
        if agent is None:
            return
        if type(agent) != Agent:
            raise Exception("Expecting agent, got " + str(type(agent)))
        if agent is self:
            return
        if self.distance(agent) > threshold:
            return
        desired = PVector.sub(agent.location, self.location)
        if desired.mag() < self.size:
            desired.setMag(map(desired.mag(), 0, self.size, 0, self.speed))
        else:
            desired.setMag(self.speed * strength)
        steer = PVector.sub(desired, self.velocity)
        self.apply_force(steer)
                
    def avoid(self, agent, threshold, strength):
        strength = max(min(strength, 1.0), 0.0)
        if agent is None:
            return            
        if type(agent) != Agent:
            raise Exception("Expecting agent, got " + str(type(agent)))
        if agent is self:
            return
        if self.distance(agent) > threshold:
            return
        desired = PVector.sub(self.location, agent.location)
        desired.setMag(self.speed * strength)
        steer = PVector.sub(desired, self.velocity)
        self.apply_force(steer)
                
    def align(self):
        pass
    
    def closest(self, agents):
        if type(agents) != list or (len(agents) and type(agents[0]) != Agent):
            raise Exception("Expecting list of agents")
        if not len(agents):
            return None
        return min(agents, key=lambda agent: self.distance(agent))


            
